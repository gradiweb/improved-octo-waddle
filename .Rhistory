testDataFrame = read.csv("/test1.csv")
trainDataFrame = read.csv("/test1.csv")
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./test1.csv")
View(testDataFrame)
View(trainDataFrame)
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
View(testDataFrame)
View(trainDataFrame)
# Read Data
install.packages(dplyr)
install.packages(dplyr)
# Read Data
install.packages("dplyr")
# 2. Escriba las instrucciones para solucionar este problema?
bind_rows(testDataFrame, trainDataFrame)
library("dplyr")
# 2. Escriba las instrucciones para solucionar este problema?
bind_rows(testDataFrame, trainDataFrame)
mergedFrames = bind_rows(testDataFrame, trainDataFrame)
clear
View(mergedFrames)
View(mergedFrames)
View(mergedFrames)
rm(mergedFrames)
# 2. Escriba las instrucciones para solucionar este problema?
mergedFrames <- left_join(testDataFrame, trainDataFrame, by=c('date.time'='datetime', 'Season'='season', 'Holiday'='holiday', 'Workingday'='workingday','Weather'='weather', 'Temp'='temp','Atemp'='atemp','Humidity'='humidity','Windspeed'='windspeed'))
View(mergedFrames)
nrow(testDataFrame)
nrow(trainDataFrame)
nrow(mergedFrames)
# 2. Escriba las instrucciones para solucionar este problema?
rm(mergedFrames)
mergedFrames <- right_join(testDataFrame, trainDataFrame, by=c('date.time'='datetime', 'Season'='season', 'Holiday'='holiday', 'Workingday'='workingday','Weather'='weather', 'Temp'='temp','Atemp'='atemp','Humidity'='humidity','Windspeed'='windspeed'))
View(mergedFrames)
nrow(mergedFrames)
# 2. Escriba las instrucciones para solucionar este problema?
rm(mergedFrames)
get_dupes(mergedFrames)
library("janitor")
get_dupes(mergedFrames)
mergedFrames <- right_join(testDataFrame, trainDataFrame, by=c('date.time'='datetime', 'Season'='season', 'Holiday'='holiday', 'Workingday'='workingday','Weather'='weather', 'Temp'='temp','Atemp'='atemp','Humidity'='humidity','Windspeed'='windspeed'))
get_dupes(mergedFrames)
get_dupes(testDataFrame)
get_dupes(trainDataFrame)
# 2. Escriba las instrucciones para solucionar este problema?
rm(mergedFrames)
mergedFrames <- inner_join(testDataFrame, trainDataFrame, by=c('date.time'='datetime', 'Season'='season', 'Holiday'='holiday', 'Workingday'='workingday','Weather'='weather', 'Temp'='temp','Atemp'='atemp','Humidity'='humidity','Windspeed'='windspeed'))
View(mergedFrames)
testDataFrame$casual
View(testDataFrame)
testDataFrame$casual
View(testDataFrame)
testDataFrame$casual <-c("N/A")
View(testDataFrame)
testDataFrame$casual <-c("N/A")
testDataFrame$registered <-c("N/A")
testDataFrame$count <-c("N/A")
View(testDataFrame)
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed")
View(testDataFrame)
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
View(testDataFrame)
rm(mergedFrames)
setdiff(testDataFrame,trainDataFrame)
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
summary(compare(testDataFrame, trainDataFrame, by = "column.names"))
install.packages("arsenal")
library("arsenal")
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
summary(compare(testDataFrame, trainDataFrame, by = "column.names"))
library("arsenal")
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
comparedf(testDataFrame, trainDataFrame)
View(testDataFrame)
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
comparedf(testDataFrame, trainDataFrame)
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
View(mergedDataFrames)
10886 + 6493
duplicated(mergedDataFrames)
View(duplicated(mergedDataFrames))
distinct(mergedDataFrames)
View(mergedDataFrames)
distinct(mergedDataFrames)
rm(mergedFrames)
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
duplicated(mergedDataFrames)
distinct(mergedDataFrames)
View(mergedDataFrames)
count(duplicated(mergedDataFrames))
nrow(mergedDataFrames[duplicated(mergedDataFrames), ])
dim(testDataFrame)
dim(testDataFrame)
dim(trainDataFrame)
dim(mergedDataFrames)
dimDataframe = (first_column = c(dim(testDataFrame)))
View(dimDataframe)
test <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(merge.data.frame))),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(merge.data.frame))),
points=round(runif(16, 4, 20),0))
View(test)
test <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(merge.data.frame))),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(merge.data.frame))))
View(test)
test <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(merge.data.frame)),each=3),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(merge.data.frame)),each=3))
View(test)
test <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(mergedDataFrames))),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(mergedDataFrames))))
View(test)
tab1 <- table(test$columns,test$rows)
View(tab1)
View(dimensionsTable)
dimensionsTable <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(mergedDataFrames))),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(mergedDataFrames))))
View(dimensionsTable)
lapply(mergedDataFrames, class)
View(mergedDataFrames)
rm(mergedDataFrames)
rm(testDataFrame)
testDataFrame = read.csv("./test1.csv")
testDataFrame$casual <-c(0)
testDataFrame$registered <-c(0)
testDataFrame$count <-c(0)
View(testDataFrame)
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
nrow(mergedDataFrames[duplicated(mergedDataFrames), ])
distinct(mergedDataFrames)
library("dplyr")
library("janitor")
library("arsenal")
distinct(mergedDataFrames)
distinct(mergedDataFrames)
dimensionsTable <- data.frame(columns=rep(c(ncol(testDataFrame),ncol(trainDataFrame),ncol(mergedDataFrames))),
rows=rep(c(nrow(testDataFrame),nrow(trainDataFrame),nrow(mergedDataFrames))))
lapply(mergedDataFrames, class)
dim(mergedDataFrames)
colnames(mergedDataFrames)
ncol(mergedDataFrames)
ncol(mergedDataFrames)
nrow(mergedDataFrames)
testDataFrame = read.csv("./test1.csv")
View(trainDataFrame)
summary(col(trainDataFrame$count))
apply(trainDataFrame[,c("count")], 1, sum)
apply(trainDataFrame[,c("count")], 1, sum)
apply(trainDataFrame[,"count"], 1, sum)
sum(trainDataFrame$count)
media = sum(trainDataFrame$count) / nrow(trainDataFrame)
media
summarise(mergedDataFrames)
summary(mergedDataFrames)
table(season$mergedDataFrames , registered$mergedDataFrames)
table(season$mergedDataFrames, registered$mergedDataFrames)
estacionesrenta Â°-data.frame(season$mergedDataFrames, registered$mergedDataFrames)
storms %>% filter(trainDataFrame$season == 1)
storms
countSpring = trainDataFrame %>% filter(season == 1)
countSpring
countSpring = trainDataFrame %>% filter(season == 1) %>% sum(trainDataFrame$count)
countSpring
countSpring = trainDataFrame %>% filter(season == 1) %>%
sum(trainDataFrame$count)
countSpring = trainDataFrame %>% filter(season == 1) %>%
sum(count)
countSpring = trainDataFrame %>% filter(season == 1)
sum(countSpring$count)
countSummer = trainDataFrame %>% filter(season == 2)
sum(countSummer$count)
countFall = trainDataFrame %>% filter(season == 3)
sum(countFall$count)
countWinter = trainDataFrame %>% filter(season == 4)
sum(countWinter$count)
descriptiveTable <- data.frame(columns=rep(c("Spring","Summer","Fall","Winter")),
rows=rep(c(sum(countSpring$count),sum(countSummer$count),sum(countFall$count),sum(countWinter$count))))
descriptiveTable
tapply(countSpring$count,countSummer$count,TRUE)
tapply(countSpring$count,countSummer$count,sum)
descriptiveTable <- data.frame(season=rep(c("Spring","Summer","Fall","Winter")),
rentedbikes=rep(c(sum(countSpring$count),sum(countSummer$count),sum(countFall$count),sum(countWinter$count))))
descriptiveTable
countSpring = mergedDataFrames %>% filter(season == 1)
sum(countSpring$count)
countSummer = mergedDataFrames %>% filter(season == 2)
sum(countSummer$count)
countFall = mergedDataFrames %>% filter(season == 3)
sum(countFall$count)
countWinter = mergedDataFrames %>% filter(season == 4)
sum(countWinter$count)
descriptiveTable <- data.frame(season=rep(c("Spring","Summer","Fall","Winter")),
rentedbikes=rep(c(sum(countSpring$count),sum(countSummer$count),sum(countFall$count),sum(countWinter$count))))
descriptiveTable
View(testDataFrame)
summary(descriptiveTable)
ls()
mergedDataFrames$count2 <- cut(mergedDataFrames$count, break=3, labels = c("Bajas","Medias","Altas"))
mergedDataFrames$count2 <- cut(mergedDataFrames$count, breaks = 3, labels = c("Bajas","Medias","Altas"))
View(mergedDataFrames)
lowP = mergedDataFrames %>% filter(count2 == "bajas")
sum(lowP)
lowP = mergedDataFrames %>% filter(count2 == "bajas")
sum(lowP$count)
lowP = mergedDataFrames %>% filter(count2 == "Bajas")
sum(lowP$count)
highP = mergedDataFrames %>% filter(count2 == "Altas")
sum(highP$count)
mediaP = mergedDataFrames %>% filter(count2 == "Medias")
sum(mediaP$count)
totalRented = sum(mergedDataFrames$count)
totalRented
dim(trainDataFrame)
lapply(mergedDataFrames, class)
3/12/2012 - 3/13/2012
"3/12/2012" - "3/13/2012"
as.Date("3/12/2012") - as.Date("3/13/2012")
as.Date(3/12/2012) - as.Date(3/13/2012)
unclass(as.character(mergedDataFrames$datetime))
lapply(mergedDataFrames, class)
as.Date(mergedDataFrames$datetime)
as.numeric(mergedDataFrames$datetime)
lapply(mergedDataFrames, class)
View(mergedDataFrames)
any(is.na(mergedDataFrames))
View(mergedDataFrames)
holidays = mergedDataFrames %>% filter(holiday == 1)
View(mergedDataFrames)
lowP = mergedDataFrames %>% filter(count2 = "Bajas")
sum(lowP$count)
holidays = mergedDataFrames %>% filter(holiday == 1)
View(mergedDataFrames)
holidays = mergedDataFrames %>% filter(holiday == 1)
View(holidays)
?prop.table
round(prop.table(table(mergedDataFrames$count2, mergedDataFrames$season),1),2) # 1 significa que saca porcentajes fila
round(prop.table(table(mergedDataFrames$count2, mergedDataFrames$season),2),2) # significa que saca porcentajes columna
round(prop.table(table(mergedDataFrames$count2, mergedDataFrames$season)),2) # significa que saca porcentajes columna
View(trainDataFrame)
summary(descriptiveTable)
descriptiveTable <- data.frame(season=rep(c("Spring","Summer","Fall","Winter")),
rentedbikes=rep(c(sum(countSpring$count),sum(countSummer$count),sum(countFall$count),sum(countWinter$count))))
descriptiveTable
media = sum(trainDataFrame$count) / length(trainDataFrame) # Preguntar a la profe
media
summary(trainDataFrame)
descriptiveTable
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
mergedDataFrames$season = factor(mergedDataFrames$season)
lapply(mergedDataFrames, class)
mergedDataFrames$season = factor(mergedDataFrames$season)
mergedDataFrames$holiday = factor(mergedDataFrames$holiday)
mergedDataFrames$workingday = factor(mergedDataFrames$workingday)
mergedDataFrames$weather = factor(mergedDataFrames$weather)
lapply(mergedDataFrames, class)
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
seasonTags<-sample(c("Spring","Summer","Fall","Winter"),4,replace=TRUE)
seaValues<-sample(1:4,4)
df1<-data.frame(seasonTags,seaValues)
df1
seasonTags<-sample(c("","Spring","Summer","Fall","Winter"),4,replace=TRUE)
seaValues<-sample(1:4,4)
df1<-data.frame(seasonTags,seaValues)
df1
seasonTags<-sample(c("","Spring","Summer","Fall","Winter"),5,replace=TRUE)
seaValues<-sample(1:4,5)
seaValues<-sample(1:4,4)
df1<-data.frame(seasonTags,seaValues)
df1
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
# 9. CuÃ¡les variables necesitan ser transformadas en factor?.
#Como los nombres de los factores son poco ilustrativos,
#reasigne estos valores con etiquetas mÃ¡s informativas
levels(factor(mergedDataFrames$season))
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c("1", "2", "3", "4"),labels("spring","summer","fall","winter"))
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c("1", "2", "3", "4"),labels("spring","summer","fall","winter"))
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c("1", "2", "3", "4"),labels = c("spring","summer","fall","winter"))
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c(1, 2, 3, 4),labels = c("spring","summer","fall","winter"))
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
lapply(mergedDataFrames, class)
countWinter = mergedDataFrames %>% filter(season == 4)
library("dplyr")
library("janitor")
library("arsenal")
countWinter = mergedDataFrames %>% filter(season == 4)
sum(countWinter$count)
summary(mergedDataFrames) ##
descriptiveTable
testDataFrame = read.csv("./test1.csv")
rm(ls)
rm()
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
testDataFrame$casual <-c('N/A')
testDataFrame$registered <-c('N/A')
testDataFrame$count <-c('N/A')
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
comparedf(testDataFrame, trainDataFrame)
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
nrow(mergedDataFrames[duplicated(mergedDataFrames), ])
distinct(mergedDataFrames)
lapply(mergedDataFrames, class)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c(1, 2, 3, 4),labels = c("spring","summer","fall","winter"))
mergedDataFrames$holiday = factor(mergedDataFrames$holiday)
mergedDataFrames$workingday = factor(mergedDataFrames$workingday)
mergedDataFrames$weather = factor(mergedDataFrames$weather)
lapply(mergedDataFrames, class)
dim(mergedDataFrames)
colnames(mergedDataFrames)
ncol(mergedDataFrames)
nrow(mergedDataFrames)
summary(mergedDataFrames) ##
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
testDataFrame$casual <-c('NA')
testDataFrame$registered <-c('NA')
testDataFrame$count <-c('NA')
View(mergedDataFrames)
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
testDataFrame$casual <-c('NA')
testDataFrame$registered <-c('NA')
testDataFrame$count <-c('NA')
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
#setdiff(testDataFrame,trainDataFrame) => Comparar tipos de datos en las columnas
comparedf(testDataFrame, trainDataFrame)
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
View(mergedDataFrames)
lapply(mergedDataFrames, class)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c(1, 2, 3, 4),labels = c("spring","summer","fall","winter"))
mergedDataFrames$holiday = factor(mergedDataFrames$holiday)
mergedDataFrames$workingday = factor(mergedDataFrames$workingday)
mergedDataFrames$weather = factor(mergedDataFrames$weather)
lapply(mergedDataFrames, class)
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c("1", "2", "3", "4"),labels = c("spring","summer","fall","winter"))
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
testDataFrame$casual <-c('NA')
testDataFrame$registered <-c('NA')
testDataFrame$count <-c('NA')
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
testDataFrame = read.csv("./test1.csv")
trainDataFrame = read.csv("./train1.csv")
View(trainDataFrame)
)
testDataFrame$casual <- NA
testDataFrame$registered <- NA
testDataFrame$count <- NA
colnames(testDataFrame) <- c("datetime", "season","holiday","workingday","weather","temp","atemp","humidity","windspeed","casual","registered","count")
mergedDataFrames = rbind(testDataFrame,trainDataFrame)
mergedDataFrames$season = factor(mergedDataFrames$season,levels = c("1", "2", "3", "4"),labels = c("spring","summer","fall","winter"))
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
mergedDataFrames$holiday = factor(mergedDataFrames$holiday,levels = c("1", "0"),labels = c("holiday","not-holiday"))
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
tapply(mergedDataFrames$holiday,mergedDataFrames$holiday,mean)
descriptiveTable <- data.frame(season=rep(c("Spring","Summer","Fall","Winter")),
descriptiveTable
library("dplyr")
library("janitor")
library("arsenal")
countSpring = mergedDataFrames %>% filter(season == 1)
sum(countSpring$count)
countSummer = mergedDataFrames %>% filter(season == 2)
sum(countSummer$count)
countFall = mergedDataFrames %>% filter(season == 3)
sum(countFall$count)
countWinter = mergedDataFrames %>% filter(season == 4)
sum(countWinter$count)
View(mergedDataFrames)
countSpring = mergedDataFrames %>% filter(season == "spring")
sum(countSpring$count)
countSummer = mergedDataFrames %>% filter(season == "summer")
sum(countSummer$count)
countFall = mergedDataFrames %>% filter(season == "fall")
sum(countFall$count)
countWinter = mergedDataFrames %>% filter(season == "winter")
sum(countWinter$count)
View(mergedDataFrames)
tapply(mergedDataFrames$count,mergedDataFrames$season,mean)
tapply(mergedDataFrames$count,mergedDataFrames$season,mean,na.rm = TRUE)
tapply(mergedDataFrames$holiday,mergedDataFrames$holiday,mean,na.rm = TRUE)
descriptiveTable
descriptiveTable <- data.frame(season=rep(c("Spring","Summer","Fall","Winter")),
rentedbikes=rep(c(sum(countSpring$count),sum(countSummer$count),sum(countFall$count),sum(countWinter$count))))
descriptiveTable
tapply(mergedDataFrames$count,mergedDataFrames$holiday,mean,na.rm = TRUE)
mergedDataFrames$weather = factor(mergedDataFrames$weather,levels = c("1", "2","3","4"),labels = c("few-clouds","broken-clouds","light-rain","heavy-rain"))
tapply(mergedDataFrames$count,mergedDataFrames$weather,mean,na.rm = TRUE)
ls()
media = sum(trainDataFrame$count) / length(trainDataFrame) # Preguntar a la profe
mediaBikes = sum(trainDataFrame$count) / length(trainDataFrame) # Preguntar a la profe
mediaBikes
mergedDataFrames$count2 <- cut(mergedDataFrames$count, breaks = 3, labels = c("Bajas","Medias","Altas"))
tapply(mergedDataFrames$count,mergedDataFrames$count2,mean,na.rm = TRUE)
tapply(mergedDataFrames$count,mergedDataFrames$count2,mean *100,na.rm = TRUE)
